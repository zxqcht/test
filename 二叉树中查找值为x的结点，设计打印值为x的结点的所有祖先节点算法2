#include <stdio.h>
#define M 1024
char N[M];
int k = 0;
typedef struct bitnode
{
 char node;
 struct bitnode* lchild;
 struct bitnode* rchild;
}BiTNode, * BiTree;

BiTree setNode() {
 BiTree bt;
 char node;
 scanf("%c\n", &node);
 if (node == '0')
 {
  bt = NULL;
 }
 else
 {
  //bt = new BiTNode;
  bt = (BiTNode*)malloc(sizeof(BiTNode));
  bt->node = node;
  bt->lchild = setNode();
  bt->rchild = setNode();
 }
 return bt;
}

int PrintAncestors(BiTree T, char x) {
 if (!T)
  return 0;
 if (T->node == x) {
  return 1;
 }


 //这个可以这样理解
 //如果一颗二叉树他的左孩子有要查询的结点或者他的右孩子里面有要查询的结点那么该节点就是祖先结点
 if (PrintAncestors(T->lchild, x) || PrintAncestors(T->rchild, x)) {

  printf("%c", T->node);
  //printf("%d",1);
  return 3;
 }
 else {
  //printf("%d",0);
  return 0;
 }
}

int main()
{
 BiTree bt = setNode();
 char x;
 scanf("%c", &x);
 int a = PrintAncestors(bt, x);
 if (a == 1) {
  printf("%d", 0);
 }
 if (a == 0) {
  printf("%d", 0);
 }

}
